# -*- coding: utf-8 -*-"""Generates simulated (matching) GRFs on the surface of fsaverage5 with aspecified correlation for use in "ground truth" testing of spatial null models."""from pathlib import Pathimport osfrom joblib import Parallel, delayedimport nibabel as nibimport numpy as npimport pandas as pdfrom spatial import (    matching_multinorm_grfs,     matching_multinorm_decimated_grfs,    make_decimated_surfaces,    )from parspin import simnulls, utils as putilsfrom neuromaps import datasetsSIMDIR = Path('../datasets/simulated').resolve()DECDIR = Path('../datasets/decimated').resolve()MASKDIR = Path('../datasets/masks').resolve()N_PROC = 36N_SIM = 1000def create_and_save_grfs(corr, alpha, seed, outdir):    """    Generates matching GRFs on fsaverage5 surface + saves outputs as MGH files    Parameters    ----------    corr : float        Desired correlation of GRFs    alpha : float        Desired spatial autocorrelation of GRFS    seed : int, None, randomState        Random state seed    outdir : pathlib.Path        Where generated GRFs should be saved    """    # checkpointing in case of restarts    if (outdir / f'x_{seed:04d}.mgh').exists():        return    x, y = matching_multinorm_grfs(corr=corr, alpha=alpha, seed=seed)    for data, name in zip((x, y), ('x', 'y')):        img = nib.freesurfer.mghformat.MGHImage(            data.astype('float32'), affine=None        )        fn = outdir / f'{name}_{seed:04d}.mgh'        nib.save(img, fn)        np.savetxt(os.path.join(outdir, f'{name}_{seed:04d}.txt'), data)        def create_and_save_decimated_grfs(surface, medial, corr, alpha, hemi, seed, outdir):    """    Generates matching GRFs on decimated surfaces of fsLR 164k + saves outputs as txt files    Parameters    ----------    surface : str        Desired decimated surface, must be single hemisphere    medial : str        Medial wall index file    corr : float        Desired correlation of GRFs    alpha : float        Desired spatial autocorrelation of GRFS    hemi : str        Desired hemisphere    seed : int, None, randomState        Random state seed    outdir : pathlib.Path        Where generated GRFs should be saved    """        # checkpointing in case of restarts    if (outdir / f'x_{seed:04d}.txt').exists():        return        x, y = matching_multinorm_decimated_grfs(surface, corr=corr, hemi=hemi,                 medial=medial, alpha=alpha, seed=seed)        for data, name in zip((x, y), ('x', 'y')):        fn = outdir / f'{name}_{seed:04d}.txt'        np.savetxt(fn, data)def parcellate_sim(val, alphadir, annot):    """    Parcellates simulated surface GRF with `annot`    Parameters    ----------    val : {'x', 'y'}        Which simulated vector to parcellate    alphadir : os.PathLike        Directory in which simulated data are stored    annot : (2,) namedtuple        With entries ('lh', 'rh') of filepaths to annotation files to be used        to parcellate data    Returns    -------    data : (N, `N_SIM`) pandas.DataFrame        Where `N` is the number of regions in the parcellation and the index        of the dataframe are the region names    """    data = pd.DataFrame(index=putils.get_names(lh=annot.lh, rh=annot.rh))    alpha = alphadir.parent.name    for sim in putils.trange(N_SIM, desc=f'Parcellating {alpha} {val}'):        img = nib.load(alphadir / f'{val}_{sim:04d}.mgh').get_fdata().squeeze()        cdata = []        for n, hemi in enumerate(('lh', 'rh')):            sl = slice(10242 * n, 10242 * (n + 1))            cdata.append(putils.parcellate(img[sl], getattr(annot, hemi)))        data = data.assign(**{str(sim): np.hstack(cdata)})    return dataif __name__ == '__main__':    for alpha in simnulls.ALPHAS:        outdir = SIMDIR / f'alpha-{float(alpha):.1f}'        outdir.mkdir(parents=True, exist_ok=True)        # generate simulated GRFs        Parallel(n_jobs=N_PROC)(            delayed(create_and_save_grfs)(                corr=0.15, alpha=alpha, seed=n, outdir=outdir            )            for n in putils.trange(N_SIM, desc=f'Simulating alpha-{alpha:.2f}')        )                outdecdir = os.path.join(DECDIR, 'alpha-3.0')        medial = os.path.join(MASKDIR, 'fs_LR_164k_medial_wall_lh_masked.txt')                standard = str(datasets.fetch_fslr(density='164k', verbose=0)['midthickness'][0])        per = 0.1        surface_fnames, medial_fnames = make_decimated_surfaces(standard, per=per, medial=medial)                for idx in range(len(surface_fnames)):            # generate decimated GRFs            Parallel(n_jobs=N_PROC)(                delayed(create_and_save_decimated_grfs)(                    surface=surface_fnames[idx], medial=medial_fnames[idx],                     corr=0.15, alpha=3.0, hemi='L', seed=n, outdir=outdecdir                )                for n in putils.trange(N_SIM, desc=f'Simulating alpha on decimated surface {idx+1}')            )        